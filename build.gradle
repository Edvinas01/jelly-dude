buildscript {
    ext {
        kotlinVersion = '1.1.1'
        ashleyVersion = '1.7.3'
        groovyVersion = '2.4.7'
        detektVersion = '1.0.0.M9'
        guiceVersion = '4.1.0'
        spockVersion = '1.1-groovy-2.4-rc-3'
        gdxVersion = '1.9.6'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
    maven { url 'http://dl.bintray.com/arturbosch/code-analysis' }
}

apply plugin: 'kotlin'
apply plugin: 'groovy'
apply plugin: 'idea'

version = '0.3-alpha'

sourceCompatibility = 1.8

project.ext.mainClassName = 'com.edd.jelly.Launcher'
project.ext.assetsDir = new File('resources')

// See:
// http://stackoverflow.com/questions/38131237/mixing-java-and-kotlin-in-gradle-project-kotlin-cannot-find-java-class
sourceSets {
    main.java.srcDirs = ['src/main/kotlin']
}

configurations {
    detekt
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

task detekt(type: JavaExec) {
    classpath = configurations.detekt
    main = 'io.gitlab.arturbosch.detekt.cli.Main'

    def params = [
            '-p', "$project.projectDir.absolutePath",
            '-c', "$project.projectDir/.detekt.yml",
            '-f', '.*test.*'
    ]

    args(params)
}

dist.dependsOn classes

idea {
    module {
        excludeDirs += file('logs')
    }
}

dependencies {

    // Kotlin!
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // Nicer fonts.
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"

    // Core LigGDX dependencies.
    compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx:$gdxVersion"

    // ECS - Ashley.
    compile "com.badlogicgames.ashley:ashley:$ashleyVersion"

    // Dependency injection.
    compile "com.google.inject:guice:$guiceVersion"

    // Logging.
    compile 'org.apache.logging.log4j:log4j-core:2.8.1'
    compile 'org.apache.logging.log4j:log4j-api:2.8.1'

    // Other useful libraries.
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.0.pr1'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.0.pr1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.0.pr1'
    compile 'commons-io:commons-io:2.5'

    // JBox2d + Liquid fun dependencies.
    compile files('libs/jbox2d/jbox2d-library-2.3.1-SNAPSHOT.jar')
    compile files('libs/jbox2d/jbox2d-library-2.3.1-SNAPSHOT-sources.jar')

    // Testing.
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
    testCompile "org.spockframework:spock-core:$spockVersion"

    // Static code analysis.
    detekt "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"
    detekt "io.gitlab.arturbosch.detekt:detekt-cli:$detektVersion"
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}